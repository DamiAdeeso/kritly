# Multi-stage build for Render
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY nx.json ./
COPY tsconfig*.json ./
COPY apps/gateway/package*.json ./apps/gateway/
COPY libs/common/package*.json ./libs/common/

# Install dependencies
RUN npm ci

# Copy source code
COPY apps/gateway ./apps/gateway
COPY libs/common ./libs/common

# Build common library
RUN cd libs/common && npm run build

# Build gateway
RUN NX_DAEMON=false npx nx build gateway

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Copy built files
COPY --from=builder /app/apps/gateway/dist ./apps/gateway/dist
COPY --from=builder /app/libs/common/dist ./libs/common/dist
COPY --from=builder /app/libs/common/src ./libs/common/src

# Copy package files for production
COPY package*.json ./
COPY apps/gateway/package*.json ./apps/gateway/

# Install only production dependencies
RUN npm ci --only=production

# Change ownership
RUN chown -R nestjs:nodejs /app

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 10000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:10000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start command
CMD ["node", "apps/gateway/dist/src/main.js"]
