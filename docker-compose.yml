version: '3.8'

services:
  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
      target: production
    container_name: rev-auth-service
    ports:
      - "3001:3001"  # gRPC port
      - "3002:3002"  # HTTP port
    environment:
      - NODE_ENV=production
    env_file:
      - env.production
    volumes:
      - auth_data:/data
    networks:
      - rev-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
      target: production
    container_name: rev-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - env.production
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - rev-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PostgreSQL Database (for development)
  postgres:
    image: postgres:15-alpine
    container_name: rev-postgres
    environment:
      - POSTGRES_DB=rev_db
      - POSTGRES_USER=rev_user
      - POSTGRES_PASSWORD=rev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rev_user -d rev_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis (for development)
  redis:
    image: redis:7-alpine
    container_name: rev-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  auth_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  rev-network:
    driver: bridge
